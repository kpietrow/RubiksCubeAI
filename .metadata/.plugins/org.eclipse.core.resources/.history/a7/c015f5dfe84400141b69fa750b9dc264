package rubik;

import java.util.HashMap;

/*
 *  Contains the checks to validate a cube's state
 * Written by Kevin Pietrow
 *
 * 
 * To serve as a reference. 
 * I'll be converting every character into a number to save space
 * [R, G, Y, B, O, W]
 * [0, 1, 2, 3, 4, 5]
 * 
 */


public class Solver {
	
	private int[][] red = new int[3][3];
	private int[][] green = new int[3][3];
	private int[][] yellow = new int[3][3];
	private int[][] blue = new int[3][3];
	private int[][] orange = new int[3][3];
	private int[][] white = new int[3][3];
	
	private int[][] corners = {{0, 2, 3}, {2, 3, 4}, {1, 2, 4}, {0, 1, 2}, {3, 4, 5}, {0, 3, 5}, {1, 4, 5}, {0, 1, 5}};
	
	private HashMap<String, int[][]> sides = new HashMap<String, int[][]>();

	
	public void centerCheck() {
		
		if (red[1][1] != 0) {
			System.out.println("false");
			System.exit(0);
		} else if (green[1][1] != 1) {
			System.out.println("false");
			System.exit(0);
		} else if (yellow[1][1] != 2) {
			System.out.println("false");
			System.exit(0);
		} else if (blue[1][1] != 3) {
			System.out.println("false");
			System.exit(0);
		} else if (orange[1][1] != 4) {
			System.out.println("false");
			System.exit(0);
		} else if (white[1][1] != 5) {
			System.out.println("false");
			System.exit(0);
		}
	}
	
	public void cornerCheck() {
		
		
		
	}
	
	
	
	

	public void setSides(HashMap<String, int[][]> sides) {
		red = sides.get("Red");
		green = sides.get("Green");
		yellow = sides.get("Yellow");
		blue = sides.get("Blue");
		orange = sides.get("Orange");
		white = sides.get("White");
		
		setCorners();
	}
	
	private void setCorners() {
		
	}
}
