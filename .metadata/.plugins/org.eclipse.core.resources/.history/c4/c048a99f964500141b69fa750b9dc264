package rubik;

import java.util.Arrays;
import java.util.HashMap;

/*
 *  Contains the checks to validate a cube's state
 * Written by Kevin Pietrow
 *
 * 
 * To serve as a reference. 
 * I'll be converting every character into a number to save space
 * [R, G, Y, B, O, W]
 * [0, 1, 2, 3, 4, 5]
 * 
 */


public class Solver {
	
	private int[][] red = new int[3][3];
	private int[][] green = new int[3][3];
	private int[][] yellow = new int[3][3];
	private int[][] blue = new int[3][3];
	private int[][] orange = new int[3][3];
	private int[][] white = new int[3][3];
	private int[][] givenCorners;
	
	// { G Y R }, { R Y B}, { B Y O }, { O Y G }, { G W O }, { O W B }, { B W R }, { R W G }
	private int[][] validCorners = {{1, 2, 0}, {0, 2, 3}, {3, 2, 0}, {4, 2, 1}, {1, 5, 4}, {4, 5, 3}, {3, 5, 0}, {0, 5, 1}};
	
	private HashMap<String, int[][]> sides = new HashMap<String, int[][]>();

	public Solver(HashMap<String, int[][]> sides) {
		this.sides = sides;
		setSides();
		setCorners();
	}
	
	
	public void centerCheck() {
		
		if (red[1][1] != 0) {
			System.out.println("false");
			System.exit(0);
		} else if (green[1][1] != 1) {
			System.out.println("false");
			System.exit(0);
		} else if (yellow[1][1] != 2) {
			System.out.println("false");
			System.exit(0);
		} else if (blue[1][1] != 3) {
			System.out.println("false");
			System.exit(0);
		} else if (orange[1][1] != 4) {
			System.out.println("false");
			System.exit(0);
		} else if (white[1][1] != 5) {
			System.out.println("false");
			System.exit(0);
		}
	}
	
	public void cornerCheck() {
		
		boolean valid = false;
		int[] corner = null;
		int[] tempCorner = null;
		int y = 0;
		
		for (int i = 0; i < givenCorners.length; i++) {
			tempCorner = givenCorners[i];
			
			for (y = 0; y < tempCorner.length; y++) {
				if (tempCorner[y] == 2 || tempCorner[y] == 5) {
					break;
				}
			}
			
			if (y == 0) {
				corner[0] = tempCorner[2];
				corner[1] = tempCorner[1];
			}
		}
		
	}
	
	
	
	

	private void setSides() {
		// set the sides
		red = sides.get("Red");
		green = sides.get("Green");
		yellow = sides.get("Yellow");
		blue = sides.get("Blue");
		orange = sides.get("Orange");
		white = sides.get("White");
	}
	
	// set the corners!
	private void setCorners() {
		
		int[][] givenCorners = {
				{green[0][2], yellow[0][0], red[2][0]}, 
				{red[2][2], yellow[0][2], blue[0][0]}, 
				{blue[2][0], yellow[2][2], orange[0][2]}, 
				{orange[0][0], yellow[2][0], green[2][2]}, 
				{green[2][0], white[0][0], orange[2][0]}, 
				{orange[2][2] , white[0][2], blue[2][2]}, 
				{blue[0][2], white[2][2], red[0][2]}, 
				{red[0][0], white[2][0], green[0][0]}};
		this.givenCorners = givenCorners;
		
	}
}
